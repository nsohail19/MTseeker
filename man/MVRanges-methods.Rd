% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MVRanges.R
\docType{methods}
\name{MVRanges}
\alias{MVRanges}
\alias{MVRanges-methods}
\alias{locateVariants}
\alias{getAnnotations}
\alias{predictCoding}
\alias{genes}
\alias{genomeCoverage,MVRanges-method}
\alias{coverage,MVRanges-method}
\alias{type,MVRanges-method}
\alias{genes,MVRanges-method}
\alias{snpCall,MVRanges-method}
\alias{pos,MVRanges-method}
\alias{show,MVRanges-method}
\alias{annotation,MVRanges-method}
\alias{getAnnotations,MVRanges-method}
\alias{encoding,MVRanges-method}
\alias{filt,MVRanges-method}
\alias{genome,MVRanges-method}
\alias{locateVariants,MVRanges,missing,missing-method}
\alias{tallyVariants,MVRanges-method}
\alias{predictCoding,MVRanges,missing,missing,missing-method}
\alias{summarizeVariants,MVRanges,missing,missing-method}
\alias{plot,MVRanges,ANY-method}
\alias{consensusString,MVRanges-method}
\title{wrap a VRanges for mitochondrial use}
\usage{
MVRanges(vr, coverage = NA_real_)

\S4method{genomeCoverage}{MVRanges}(x)

\S4method{coverage}{MVRanges}(x)

\S4method{type}{MVRanges}(x)

\S4method{genes}{MVRanges}(x)

\S4method{snpCall}{MVRanges}(object)

\S4method{pos}{MVRanges}(x)

\S4method{show}{MVRanges}(object)

\S4method{annotation}{MVRanges}(object)

\S4method{getAnnotations}{MVRanges}(annotations)

\S4method{encoding}{MVRanges}(x)

\S4method{filt}{MVRanges}(x)

\S4method{genome}{MVRanges}(x)

\S4method{locateVariants}{MVRanges,missing,missing}(query,
  filterLowQual = FALSE, ...)

\S4method{tallyVariants}{MVRanges}(x, filterLowQual = TRUE, ...)

\S4method{predictCoding}{MVRanges,missing,missing,missing}(query, subject,
  seqSource, varAllele, ...)

\S4method{summarizeVariants}{MVRanges,missing,missing}(query, subject,
  mode, ...)

\S4method{plot}{MVRanges,ANY}(x, y, ...)

\S4method{consensusString}{MVRanges}(x, ...)
}
\arguments{
\item{vr}{the VRanges}

\item{coverage}{estimated coverage}

\item{x}{an MVRanges}

\item{object}{an MVRanges}

\item{annotations}{an MVRanges}

\item{query}{an MVRanges}

\item{filterLowQual}{boolean; drop non-PASSing variants from locateVariants?}

\item{...}{miscellaneous args, passed through}

\item{subject}{a GRanges, usually}

\item{seqSource}{a BSgenome, usually}

\item{varAllele}{variant alleles}

\item{mode}{miscellaneous arguments}

\item{y}{another MVRanges}
}
\value{
an MVRanges

depends on the method invoked.
}
\description{
Usually the MVRanges constructor will be called by callMT().

Many of these methods can be dispatched from an MVRangesList OR an MVRanges.
In such cases, the method will usually, but not always, be apply()ed.
}
\section{Utility methods}{


`pos` returns a character vector describing variant positions. 
`filt` returns a subset of variant calls where PASS == TRUE (i.e. filtered)
`coverage` returns an Rle of coverage across the mitochondrial genome
`genomeCoverage` returns the estimated mitochondrial read coverage depth
}

\section{Annotation methods}{


`type` returns a character vector describing variant type (SNV or indel)
`genes` retrieves a GRanges of mitochondrial gene locations for an MVRanges
`snpCall` retrieves single nucleotide variant polymorphisms PASSing filters
`annotation` gets (perhaps oddly) an MVRanges object annotated against rCRS
`getAnnotations` returns the GRanges of gene/region annotations for an MVR
`encoding` returns variants residing in coding regions (consequence unknown)
`locateVariants` annotates variants w/region, gene, and localStart/localEnd
`predictCoding` returns variants consequence predictions as one might expect
`tallyVariants` returns a named vector of variant types by annotated region.
`summarizeVariants` uses MitImpact to attempt annotation of coding variants.
`consensusString` edits rCRS to create a consensus genotype for eg Haplogrep
}

\section{Visualization methods}{


`plot` creates a circular plot of mitochondrial variant calls with annotation
}

\examples{

library(MTseekerData)
BAMdir <- system.file("extdata", "BAMs", package="MTseekerData")
BAMs <- paste0(BAMdir, "/", list.files(BAMdir, pattern=".bam$"))
(mal <- getMT(BAMs[1]))
if (requireNamespace("GmapGenome.Hsapiens.rCRS", quietly=TRUE)) {
  (mvr <- callMT(mal))
  locateVariants(mvr)
  predictCoding(mvr) 
} else { 
  message("You have not yet installed an rCRS reference genome.")
  message("Consider running the indexMTgenome() function to do so.")
  message("An example MVRanges is RONKSvariants$RO_1 from MTseekerData.")
}

# summarizeVariants can take too long to run, and requires internet access 

}
